Student ID:  [____________]
Family Name: [____________]
First Name:  [____________]

INSTRUCTIONS:

Complete and return this multiple-choice exam
no later than 23:59 CET Monday 23 August 2021.

You may consult any written material you wish
(e.g. the class notes or the recommended textbook),
but you must not consult or collaborate with
any other person.

Complete this exam by placing an 'X' in the box
beside the single correct answer of each question,
like so:

    [ ] This is not the correct answer
    [ ] This is not the correct answer either
    [ ] This is an incorrect answer
    [X] This is the correct answer
    [ ] This is an irrelevant answer

WARNING: Each question has only one correct answer.
         If two or more boxes are marked with an 'X',
         the answer will be scored as zero.

________________________________________________________________________________


1. The difference between a 'my' variable and an 'our' variable is:

    [ ] 'my' variables are assignable;        'our' variables are constants
    [ ] 'my' variables must be scalars;       'our' variables must be arrays or hashes
    [ ] 'my' variables are compile-time;      'our' variables are run-time
    [ ] 'my' variables are subroutine scoped; 'our' variables are block scoped
    [ ] 'my' variables are lexically scoped;  'our' variables are package scoped

________________________________________________________________________________


2. A "reference" in Perl is best described as:

    [ ] A link to the documentation for an existing value or variable
    [ ] A mutable pointer to a value or variable, without type-checking
    [ ] An alias (i.e. another name) for an existing variable
    [ ] A deep copy of an existing variable or value
    [ ] A type-safe immutable pointer to an existing value or variable

________________________________________________________________________________


3. The keyword to throw an exception in Perl is:

    [ ] 'die'
    [ ] 'raise'
    [ ] 'exit'
    [ ] 'except'
    [ ] 'throw'

________________________________________________________________________________


4. The three standard sigils for variable declarations are:

    [ ] '$' for scalars, '@' for consts, '%' for literals
    [ ] '$' for lookups, '@' for reuses, '%' for declarations
    [ ] '$' for numeric, '@' for emails, '%' for percentages
    [ ] '$' for scalars, '@' for arrays, '%' for hashes
    [ ] '$' for scalars, '@' for hashes, '%' for arrays

________________________________________________________________________________


5. Perl's three main types of call context (or "amount context") are:

    [ ] Blood, sweat, and tears
    [ ] List, scalar, and void
    [ ] List, scalar, and null
    [ ] List, linear, and void
    [ ] Null, scalar, and void

________________________________________________________________________________


6. The term qq{XXXXX} is...

    [ ] ...another way of writing the list of strings:  ('X', 'X', 'X', 'X', 'X')
    [ ] ...another way of writing the double-quoted string: "XXXXX"
    [ ] ...another way of writing the single-quoted string: 'XXXXX'
    [ ] ...a call to the 'qq' function, passing it a block of code
    [ ] ...another way of writing the array of strings: ['X', 'X', 'X', 'X', 'X']

________________________________________________________________________________


7. "Short-circuiting" of a boolean expression means...

    [ ] ...Perl defers evaluating the expression until the result is tested
    [ ] ...Perl only evaluates each boolean expression once during the program
    [ ] ...Perl programs can cause CPUs to emit sparks if an expression is too complex
    [ ] ...Perl will never execute an 'else' block
    [ ] ...Perl evaluates as little as required to get a definite answer

________________________________________________________________________________


8. Which of the following is NOT a single valid Perl number?

    [ ] 1'042
    [ ] 1042
    [ ] 1_042
    [ ] 1.042e3
    [ ] 0b10000010010

________________________________________________________________________________


9. Which variable contains the argument with which a subroutine was called?

    [ ] @ARGV
    [ ] $_
    [ ] $ARGV
    [ ] @_
    [ ] @ARGS

________________________________________________________________________________

10. The static type of a Perl variable is determined by:

    [ ] Nothing: Perl variables don't have a static type
    [ ] The compile-time type declarator of the variable
    [ ] Random chance
    [ ] The name of the variable
    [ ] The type of the first value placed in the variable

________________________________________________________________________________


11. If the array @x contains four elements,
    how many elements will be in the list (1, @x, 2)?

    [ ] Two:   because Perl ignores non-scalar variables in a list constructor
    [ ] None:  because it won't compile; arrays can't be used in list constructors
    [ ] Three: because the array will become a single element within the list
    [ ] Six:   because the four array elements will be flattened into the list
    [ ] Eight: because 1 * 4 * 2 = 8

________________________________________________________________________________


12. A single-quoted string (such as: 'I will achieve 100% on this exam')...

    [ ] ...converts its contents to ASCII, even if they are Unicode characters
    [ ] ...only interpolates backslashed escape sequences, but not variables
    [ ] ...interpolates both variables and backslashed escape sequences
    [ ] ...does not interpolate variables or backslashed escape sequences
    [ ] ...only interpolates variables, but not backslashed escape sequences

________________________________________________________________________________


13. The expression 1 / 'Inf' produces the result:

    [ ] 0 (because that's the correct mathematical outcome)
    [ ] An infinite evaluation loop; the program will run forever
    [ ] 1 (as a convenience, to avoid subsequent division by zero)
    [ ] A non-fatal warning (because 'Inf' is a string, not a number)
    [ ] A fatal exception (because 'Inf' is a string, not a number)

________________________________________________________________________________


14. What is the purpose of the 'use strict' pragma?

    [ ] It disallows package variables (all variables must be declared with 'my')
    [ ] It reports all errors using verbose (and harshly worded) error messages
    [ ] It prevents any construct that might also be valid C code
    [ ] It converts all warnings to fatal errors
    [ ] It disallows undeclared variables, barewords, and symbolic references

________________________________________________________________________________


15. You can access the command-line arguments of a Perl program via:

    [ ] $ARGV
    [ ] @ARG
    [ ] @_
    [ ] @ARGS
    [ ] @ARGV

________________________________________________________________________________


16. If a user-defined subroutine does not contain a 'return' statement...

    [ ] ...it will return the value the last expression it actually evaluates
    [ ] ...it will never return and will continue to execute forever
    [ ] ...it will return 'undef'
    [ ] ...it will throw an exception after executing its final statement
    [ ] ...it will return the value the final statement in its code block

________________________________________________________________________________


17. To specify a second alternative test after an 'if', the correct keyword is:

    [ ] else if (with whitespace between the two words)
    [ ] elif
    [ ] ormaybe (with no whitespace between the two words)
    [ ] elseif  (with no whitespace between the two words)
    [ ] elsif

________________________________________________________________________________


18. Which five Perl values are the only values that ever evaluate false?

    [ ] 0, '0', 'false', 'False', 'FALSE'
    [ ] 0, '0', '', (), undef
    [ ] False, Nil, Null, None, Empty
    [ ] 0, +0, -0, 0.0, -0.0
    [ ] 0, '0', '', (), []

________________________________________________________________________________

19. Which one of the following subroutine declarations correctly declares
    a subroutine that can must be called with at least two arguments
    but which may also be called with more than two arguments?

    [ ] sub two_or_more ($flag, @data)           {...}
    [ ] sub two_or_more ($flag, ...)             {...}
    [ ] sub two_or_more ($data, $flag)           {...}
    [ ] sub two_or_more ($flag, $data = @extras) {...}
    [ ] sub two_or_more (@flags, @data_set)      {...}

________________________________________________________________________________


20. A "foreach-style" loop (such as: for (@list) {...}) will be iterated...

    [ ] ...once per element in the list in all circumstances
    [ ] ...never, because an array is not a list and cannot be iterated
    [ ] ...once per element in the list, unless a 'last' is executed in the block
    [ ] ...endlessly, until a 'last' is executed in the loop
    [ ] ...an unknown number of times, until the list being iterated is empty

________________________________________________________________________________


21. The keywords for the Perl switch statement are:

    [ ] 'case'   and 'of'      and 'or'
    [ ] 'gather' and 'take'    and 'otherwise'
    [ ] 'given'  and 'when'    and 'default'
    [ ] 'whence' and 'whither' and 'thither'
    [ ] 'switch' and 'case'    and 'else'

________________________________________________________________________________


22. The main repository for Open Source Perl modules is:

    [ ] Github
    [ ] CSPAN
    [ ] www.perl.org
    [ ] Perlhub
    [ ] CPAN

________________________________________________________________________________


23. User-defined subroutines are declared with the keyword:

    [ ] 'subroutine'
    [ ] 'fun'
    [ ] Nothing: subroutines are not explicitly declared in Perl
    [ ] 'sub'
    [ ] 'do'

________________________________________________________________________________


24. The "default variable" (or "topic variable") is:

    [ ] $$
    [ ] The last variable that was successfully assigned to
    [ ] $_
    [ ] @_
    [ ] $=

________________________________________________________________________________


25. An 'if' statement requires curly brackets around the statements it controls...

    [ ] ...never; the curly brackets are always optional in an 'if' statement
    [ ] ...only if it controls two or more statements
    [ ] ...only if the statements it controls include a variable declaration
    [ ] ...in all circumstances
    [ ] ...only if it controls exactly one statement

________________________________________________________________________________


26. In Perl, you can take references to...

    [ ] ...scalars, arrays, hashes, and subroutines
    [ ] ...scalars, arrays, and hashes, but NOT subroutines
    [ ] ...only scalars (NOT to arrays, hashes, or subroutines)
    [ ] ...scalars and arrays, but NOT hashes or subroutines
    [ ] ...arrays and hashes (i.e. containers), but NOT scalars or subroutines

________________________________________________________________________________


27. How can exceptions be caught and subsequently accessed in Perl?

    [ ] Exceptions in Perl can't be caught or accessed after they're thrown
    [ ] Caught in a 'try' block;    accessed via the builtin 'eval' function
    [ ] Caught in an 'eval' block;  accessed via the special $@ variable
    [ ] Caught in a 'catch' block;  accessed via an 'access' block
    [ ] Caught in an 'eval' block'; accessed via the special $! variable

________________________________________________________________________________


28. The 'while' loop in Perl...

    [ ] ...doesn't exist; Perl does not have a 'while' loop
    [ ] ...iterates until its condition is true at the start of an iteration
    [ ] ...iterates until its condition becomes true anywhere within its block
    [ ] ...iterates until its condition is false at the start of an iteration
    [ ] ...iterates until its condition becomes false anywhere within its block

________________________________________________________________________________


29. A hash variable stores...

    [ ] Values that are always strings, indexed by keys of any type
    [ ] Random values, indexed by sequential keys of any type
    [ ] Values of any scalar or list type, indexed by keys that are always strings
    [ ] Values of any scalar type, indexed by keys that are always strings
    [ ] Values that are unique, indexed by keys that may be repeated

________________________________________________________________________________


30. An array is...

    [ ] A list with a predeclared fixed number of elements
    [ ] Exactly the same thing as a list
    [ ] A multidimensional list
    [ ] Something that is always contained inside a list
    [ ] A container for a list

================================================================================
                                  END OF EXAM
================================================================================
